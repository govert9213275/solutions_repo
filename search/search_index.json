{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"1. Theoretical Foundation 1.1 Introduction Projectile motion is governed by Newton's laws of motion under the influence of a constant gravitational field. In this section, we derive the parametric equations for projectile motion, and express the key characteristics \u2014 time of flight , horizontal range , and maximum height \u2014 in terms of: Initial velocity \\(v_0\\) Projection angle \\(\\theta\\) Gravitational acceleration \\(g\\) Launch height \\(h\\) (optional) We assume the absence of air resistance and a flat horizontal surface unless otherwise stated. 1.2 Deriving the Equations of Motion We decompose the initial velocity \\(v_0\\) into horizontal and vertical components: Horizontal: \\(v_{0x} = v_0 \\cos \\theta\\) Vertical: \\(v_{0y} = v_0 \\sin \\theta\\) Assuming acceleration due to gravity acts only vertically, the kinematic equations are: Horizontal Motion: \\[ x(t) = v_0 \\cos \\theta \\cdot t \\] Vertical Motion: \\[ y(t) = h + v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\] These parametric equations describe the complete trajectory: - \\(x(t)\\) : Horizontal displacement at time \\(t\\) - \\(y(t)\\) : Vertical displacement at time \\(t\\) 1.3 Time of Flight (T) Case A: Launched from Ground ( \\(h = 0\\) ) The projectile lands when \\(y(T) = 0\\) . Solve: $$ 0 = v_0 \\sin \\theta \\cdot T - \\frac{1}{2} g T^2 $$ Factoring out \\(T\\) : $$ T \\left( v_0 \\sin \\theta - \\frac{1}{2} g T \\right) = 0 $$ Ignoring the trivial solution \\(T = 0\\) , we get: $$ T = \\frac{2 v_0 \\sin \\theta}{g} $$ Case B: Launched from Height \\(h > 0\\) Solve \\(y(T) = 0\\) : $$ 0 = h + v_0 \\sin \\theta \\cdot T - \\frac{1}{2} g T^2 $$ This is a quadratic in \\(T\\) : $$ \\frac{1}{2} g T^2 - v_0 \\sin \\theta \\cdot T - h = 0 $$ Solving: $$ T = \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} $$ (Only the positive root is physically valid.) 1.4 Horizontal Range (R) The horizontal range is the total horizontal distance traveled before the projectile lands: \\[ R = x(T) = v_0 \\cos \\theta \\cdot T \\] Using the time of flight expressions above: If \\(h = 0\\) : \\[ R = v_0 \\cos \\theta \\cdot \\frac{2 v_0 \\sin \\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This range is maximized when \\(\\sin(2\\theta)\\) is maximal, i.e., when \\(2\\theta = 90^\\circ \\Rightarrow \\theta = 45^\\circ\\) . If \\(h > 0\\) : Use: $$ R = v_0 \\cos \\theta \\cdot \\left( \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} \\right) $$ 1.5 Maximum Height ( \\(H\\) ) The projectile reaches its maximum height when the vertical velocity becomes zero: \\[ v_y(t_H) = 0 = v_0 \\sin \\theta - g t_H \\] Solving for time to reach maximum height: $$ t_H = \\frac{v_0 \\sin \\theta}{g} $$ Substitute into \\(y(t)\\) : $$ H = h + v_0 \\sin \\theta \\cdot \\frac{v_0 \\sin \\theta}{g} - \\frac{1}{2} g \\left( \\frac{v_0 \\sin \\theta}{g} \\right)^2 $$ Simplifies to: $$ H = h + \\frac{(v_0 \\sin \\theta)^2}{2g} $$ 1.6 Assumptions To derive these equations, we made the following assumptions: The gravitational field is uniform: \\(g = 9.81 \\ \\text{m/s}^2\\) . The projectile is treated as a point mass. Air resistance is negligible. The launch and landing surfaces are horizontal and level (unless otherwise stated). The Earth's curvature and rotation are ignored (reasonable for short distances). 2. Analysis of the Range 2.1 Definition The range \\(R\\) of a projectile is defined as the horizontal distance traveled between the launch point and the point of impact (where the projectile returns to the same vertical level, or hits the ground). The range is a function of several parameters: Initial velocity: \\(v_0\\) Projection angle: \\(\\theta\\) Gravitational acceleration: \\(g\\) Launch height: \\(h\\) We express \\(R\\) as a function of the angle \\(\\theta\\) under two scenarios: 2.2 Launch from Ground Level ( \\(h = 0\\) ) From the theoretical derivation: Time of flight: $$ T = \\frac{2 v_0 \\sin \\theta}{g} $$ Horizontal velocity: \\(v_0 \\cos \\theta\\) Thus, the horizontal range is: $$ R(\\theta) = v_0 \\cos \\theta \\cdot \\frac{2 v_0 \\sin \\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ Observations: The range is maximum when \\(\\sin(2\\theta) = 1\\) , which occurs at: $$ \\theta = 45^\\circ $$ The function \\(\\sin(2\\theta)\\) is symmetric about \\(\\theta = 45^\\circ\\) : $$ R(30^\\circ) = R(60^\\circ), \\quad R(20^\\circ) = R(70^\\circ) $$ \\(R(\\theta)\\) is a trigonometric function bounded by: $$ 0 \\leq R(\\theta) \\leq \\frac{v_0^2}{g} $$ 2.3 Launch from a Height ( \\(h > 0\\) ) The time of flight becomes: $$ T = \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} $$ Thus, the range is: $$ R(\\theta) = v_0 \\cos \\theta \\cdot \\left( \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} \\right) $$ Key Insights: The expression is no longer symmetric about \\(45^\\circ\\) . As \\(h\\) increases, the projectile stays in the air longer, increasing the range. The angle for maximum range is less than \\(45^\\circ\\) when launched from height. 2.4 Factors Influencing the Range 1. Initial Velocity ( \\(v_0\\) ) Range is quadratic in \\(v_0\\) : $$ R \\propto v_0^2 $$ Doubling \\(v_0\\) quadruples the range (all else equal). 2. Gravitational Acceleration ( \\(g\\) ) Range is inversely proportional to \\(g\\) : $$ R \\propto \\frac{1}{g} $$ Projectiles travel farther on the Moon (lower \\(g\\) ), and shorter on Jupiter (higher \\(g\\) ). 3. Projection Angle ( \\(\\theta\\) ) For ground-level launch: $$ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ \\(R\\) increases with \\(\\theta\\) up to \\(45^\\circ\\) , then decreases. 4. Launch Height ( \\(h\\) ) Higher \\(h\\) \u2192 longer flight time \u2192 greater range. The angle that maximizes range shifts lower as \\(h\\) increases. There is no simple analytical angle that maximizes range in this case \u2014 it must be found numerically. 2.5 Summary At ground level , \\(R(\\theta)\\) is maximized at \\(\\theta = 45^\\circ\\) . With launch height , maximum range occurs at \\(\\theta < 45^\\circ\\) . Range is sensitive to changes in \\(v_0\\) and \\(h\\) , and inversely sensitive to \\(g\\) . Real-world applications must consider terrain, air resistance, and spin for accurate modeling. \ud83c\udf0d 3. Practical Applications 3.1 Real-World Examples of Projectile Motion Projectile motion models are widely used to analyze and predict the behavior of objects launched through the air. Although idealized, the core concepts apply across multiple fields: \u26bd Sports Football : Calculating the arc of a long-range shot or optimizing a throw-in angle. Basketball : Predicting whether a jump shot will go in, based on release angle and velocity. Golf : Determining launch angles and spin for maximum driving distance. \ud83e\ude96 Artillery & Military Projectile Trajectories : A fundamental component in the design and deployment of rockets, mortars, and ballistic missiles. Targeting Algorithms : Simplified models used in early targeting, later refined with correction factors. \u26f2 Civil & Mechanical Engineering Water Fountains : Designing jets to achieve desired arcs and reach. Fire Hose Streams : Ensuring water reaches upper floors or targets accurately. \ud83c\udf0c Space and Astrophysics Planetary Landings : Parabolic descent approximations are used during initial planning phases. Escape Velocities : Initial modeling assumes projectile-style motion before introducing orbital dynamics. 3.2 Limitations of the Basic Model The idealized equations of projectile motion assume: Constant gravitational acceleration ( \\(g\\) ) No air resistance Flat, horizontal ground No rotation or curvature of the Earth Point-mass particles (no size or spin) These assumptions limit the accuracy of predictions in real scenarios. Here are the main factors not considered in the basic model: 3.3 Additional Real-World Factors 1. \ud83c\udf00 Air Resistance (Drag) Air resistance opposes the direction of motion and increases with velocity. Its presence results in: Shorter range : The projectile loses kinetic energy over time. Asymmetrical trajectory : The descent is steeper than the ascent. Terminal velocity : For downward motion, objects stop accelerating eventually. The drag force can be modeled as: $$ F_d = \\frac{1}{2} C_d \\rho A v^2 $$ Where: - \\(C_d\\) : Drag coefficient - \\(\\rho\\) : Air density - \\(A\\) : Cross-sectional area - \\(v\\) : Instantaneous velocity Including air resistance requires solving a system of coupled nonlinear differential equations. 2. \ud83c\udf2c\ufe0f Wind Wind can alter the projectile path significantly: - Headwind reduces range - Tailwind increases range - Crosswind introduces lateral deflection Wind must be modeled as an external velocity vector affecting the relative airspeed of the projectile. 3. \ud83c\udfd4\ufe0f Inclined or Curved Terrain Flat ground assumption fails in: - Mountainous terrain - Urban environments - Ramps and inclined launch pads When the landing surface is inclined at an angle \\(\\phi\\) , the effective range becomes geometry-dependent: $$ R_{\\text{inclined}} = \\frac{v_0^2 \\sin(2(\\theta - \\phi))}{g \\cos^2 \\phi} $$ Curved surfaces require even more complex treatment, often using polar or spherical coordinate systems. 4. \ud83e\udded Earth's Rotation (Coriolis Effect) For long-range projectiles (e.g., intercontinental artillery or rockets): - The Coriolis force due to Earth\u2019s rotation deflects trajectories. - Significant in military and aerospace engineering. 3.4 Summary Factor Effect on Motion Requires Complex Modeling? Air Resistance Reduces range, changes trajectory \u2705 Yes Wind Alters path, may drift laterally \u2705 Yes Terrain Geometry Affects landing height and distance \u2705 Yes Earth's Rotation Causes trajectory deviation \u2705 Yes While the basic projectile model provides a strong foundation, accurate prediction and engineering design require extending the model to account for these factors through numerical methods or simulation. # \u2705 Imports import numpy as np import matplotlib.pyplot as plt from math import radians, sin, cos, sqrt from ipywidgets import interact import warnings warnings.filterwarnings('ignore') # \u2705 Core Functions def compute_range(v0, theta_deg, g=9.81): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g def compute_range_with_height(v0, theta_deg, h, g=9.81): theta_rad = radians(theta_deg) vy = v0 * sin(theta_rad) vx = v0 * cos(theta_rad) discriminant = vy**2 + 2 * g * h if discriminant < 0: return 0 t_total = (vy + sqrt(discriminant)) / g return vx * t_total # \u2705 Plot: Range vs. Angle (Ground Level) def plot_range_vs_angle(v0, g=9.81): angles = np.linspace(0, 90, 500) ranges = [compute_range(v0, theta, g) for theta in angles] plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f\"v\u2080 = {v0} m/s\") plt.title(\"Range vs. Launch Angle (Ground Level)\") plt.xlabel(\"Angle \u03b8 (degrees)\") plt.ylabel(\"Range R (meters)\") plt.grid(True) plt.legend() plt.show() # \u2705 Plot: Range vs. Angle (With Height) def plot_range_vs_angle_with_height(v0, h, g=9.81): angles = np.linspace(1, 89, 500) ranges = [compute_range_with_height(v0, theta, h, g) for theta in angles] plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, color='green', label=f\"v\u2080 = {v0} m/s, height = {h} m\") plt.title(\"Range vs. Launch Angle (With Height)\") plt.xlabel(\"Angle \u03b8 (degrees)\") plt.ylabel(\"Range R (meters)\") plt.grid(True) plt.legend() plt.show() # \u2705 Plot: Multiple Trajectories def plot_trajectories(v0, h=0, g=9.81, angles_deg=[15, 30, 45, 60, 75]): plt.figure(figsize=(10, 6)) for angle in angles_deg: theta = radians(angle) vx = v0 * cos(theta) vy = v0 * sin(theta) discriminant = vy**2 + 2 * g * h if discriminant < 0: continue t_flight = (vy + sqrt(discriminant)) / g t = np.linspace(0, t_flight, 500) x = vx * t y = h + vy * t - 0.5 * g * t**2 plt.plot(x, y, label=f\"{angle}\u00b0\") plt.title(\"Projectile Trajectories at Different Angles\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.show() # \u2705 Interactive Dashboard (Colab-compatible) @interact(v0=(10, 100, 5), h=(0, 50, 1), g=(5.0, 20.0, 0.1)) def update(v0=30, h=0, g=9.81): plot_range_vs_angle(v0, g) plot_range_vs_angle_with_height(v0, h, g) plot_trajectories(v0, h, g)","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-introduction","text":"Projectile motion is governed by Newton's laws of motion under the influence of a constant gravitational field. In this section, we derive the parametric equations for projectile motion, and express the key characteristics \u2014 time of flight , horizontal range , and maximum height \u2014 in terms of: Initial velocity \\(v_0\\) Projection angle \\(\\theta\\) Gravitational acceleration \\(g\\) Launch height \\(h\\) (optional) We assume the absence of air resistance and a flat horizontal surface unless otherwise stated.","title":"1.1 Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-deriving-the-equations-of-motion","text":"We decompose the initial velocity \\(v_0\\) into horizontal and vertical components: Horizontal: \\(v_{0x} = v_0 \\cos \\theta\\) Vertical: \\(v_{0y} = v_0 \\sin \\theta\\) Assuming acceleration due to gravity acts only vertically, the kinematic equations are:","title":"1.2 Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"\\[ x(t) = v_0 \\cos \\theta \\cdot t \\]","title":"Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"\\[ y(t) = h + v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\] These parametric equations describe the complete trajectory: - \\(x(t)\\) : Horizontal displacement at time \\(t\\) - \\(y(t)\\) : Vertical displacement at time \\(t\\)","title":"Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-time-of-flight-t","text":"","title":"1.3 Time of Flight (T)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#case-a-launched-from-ground-h-0","text":"The projectile lands when \\(y(T) = 0\\) . Solve: $$ 0 = v_0 \\sin \\theta \\cdot T - \\frac{1}{2} g T^2 $$ Factoring out \\(T\\) : $$ T \\left( v_0 \\sin \\theta - \\frac{1}{2} g T \\right) = 0 $$ Ignoring the trivial solution \\(T = 0\\) , we get: $$ T = \\frac{2 v_0 \\sin \\theta}{g} $$","title":"Case A: Launched from Ground (\\(h = 0\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#case-b-launched-from-height-h-0","text":"Solve \\(y(T) = 0\\) : $$ 0 = h + v_0 \\sin \\theta \\cdot T - \\frac{1}{2} g T^2 $$ This is a quadratic in \\(T\\) : $$ \\frac{1}{2} g T^2 - v_0 \\sin \\theta \\cdot T - h = 0 $$ Solving: $$ T = \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} $$ (Only the positive root is physically valid.)","title":"Case B: Launched from Height \\(h &gt; 0\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#14-horizontal-range-r","text":"The horizontal range is the total horizontal distance traveled before the projectile lands: \\[ R = x(T) = v_0 \\cos \\theta \\cdot T \\] Using the time of flight expressions above:","title":"1.4 Horizontal Range (R)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#if-h-0","text":"\\[ R = v_0 \\cos \\theta \\cdot \\frac{2 v_0 \\sin \\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This range is maximized when \\(\\sin(2\\theta)\\) is maximal, i.e., when \\(2\\theta = 90^\\circ \\Rightarrow \\theta = 45^\\circ\\) .","title":"If \\(h = 0\\):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#if-h-0_1","text":"Use: $$ R = v_0 \\cos \\theta \\cdot \\left( \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} \\right) $$","title":"If \\(h &gt; 0\\):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#15-maximum-height-h","text":"The projectile reaches its maximum height when the vertical velocity becomes zero: \\[ v_y(t_H) = 0 = v_0 \\sin \\theta - g t_H \\] Solving for time to reach maximum height: $$ t_H = \\frac{v_0 \\sin \\theta}{g} $$ Substitute into \\(y(t)\\) : $$ H = h + v_0 \\sin \\theta \\cdot \\frac{v_0 \\sin \\theta}{g} - \\frac{1}{2} g \\left( \\frac{v_0 \\sin \\theta}{g} \\right)^2 $$ Simplifies to: $$ H = h + \\frac{(v_0 \\sin \\theta)^2}{2g} $$","title":"1.5 Maximum Height (\\(H\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#16-assumptions","text":"To derive these equations, we made the following assumptions: The gravitational field is uniform: \\(g = 9.81 \\ \\text{m/s}^2\\) . The projectile is treated as a point mass. Air resistance is negligible. The launch and landing surfaces are horizontal and level (unless otherwise stated). The Earth's curvature and rotation are ignored (reasonable for short distances).","title":"1.6 Assumptions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-definition","text":"The range \\(R\\) of a projectile is defined as the horizontal distance traveled between the launch point and the point of impact (where the projectile returns to the same vertical level, or hits the ground). The range is a function of several parameters: Initial velocity: \\(v_0\\) Projection angle: \\(\\theta\\) Gravitational acceleration: \\(g\\) Launch height: \\(h\\) We express \\(R\\) as a function of the angle \\(\\theta\\) under two scenarios:","title":"2.1 Definition"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-launch-from-ground-level-h-0","text":"From the theoretical derivation: Time of flight: $$ T = \\frac{2 v_0 \\sin \\theta}{g} $$ Horizontal velocity: \\(v_0 \\cos \\theta\\) Thus, the horizontal range is: $$ R(\\theta) = v_0 \\cos \\theta \\cdot \\frac{2 v_0 \\sin \\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} $$","title":"2.2 Launch from Ground Level (\\(h = 0\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#observations","text":"The range is maximum when \\(\\sin(2\\theta) = 1\\) , which occurs at: $$ \\theta = 45^\\circ $$ The function \\(\\sin(2\\theta)\\) is symmetric about \\(\\theta = 45^\\circ\\) : $$ R(30^\\circ) = R(60^\\circ), \\quad R(20^\\circ) = R(70^\\circ) $$ \\(R(\\theta)\\) is a trigonometric function bounded by: $$ 0 \\leq R(\\theta) \\leq \\frac{v_0^2}{g} $$","title":"Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#23-launch-from-a-height-h-0","text":"The time of flight becomes: $$ T = \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} $$ Thus, the range is: $$ R(\\theta) = v_0 \\cos \\theta \\cdot \\left( \\frac{v_0 \\sin \\theta + \\sqrt{(v_0 \\sin \\theta)^2 + 2 g h}}{g} \\right) $$","title":"2.3 Launch from a Height (\\(h &gt; 0\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-insights","text":"The expression is no longer symmetric about \\(45^\\circ\\) . As \\(h\\) increases, the projectile stays in the air longer, increasing the range. The angle for maximum range is less than \\(45^\\circ\\) when launched from height.","title":"Key Insights:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#24-factors-influencing-the-range","text":"","title":"2.4 Factors Influencing the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-initial-velocity-v_0","text":"Range is quadratic in \\(v_0\\) : $$ R \\propto v_0^2 $$ Doubling \\(v_0\\) quadruples the range (all else equal).","title":"1. Initial Velocity (\\(v_0\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-gravitational-acceleration-g","text":"Range is inversely proportional to \\(g\\) : $$ R \\propto \\frac{1}{g} $$ Projectiles travel farther on the Moon (lower \\(g\\) ), and shorter on Jupiter (higher \\(g\\) ).","title":"2. Gravitational Acceleration (\\(g\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-projection-angle-theta","text":"For ground-level launch: $$ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ \\(R\\) increases with \\(\\theta\\) up to \\(45^\\circ\\) , then decreases.","title":"3. Projection Angle (\\(\\theta\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-launch-height-h","text":"Higher \\(h\\) \u2192 longer flight time \u2192 greater range. The angle that maximizes range shifts lower as \\(h\\) increases. There is no simple analytical angle that maximizes range in this case \u2014 it must be found numerically.","title":"4. Launch Height (\\(h\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#25-summary","text":"At ground level , \\(R(\\theta)\\) is maximized at \\(\\theta = 45^\\circ\\) . With launch height , maximum range occurs at \\(\\theta < 45^\\circ\\) . Range is sensitive to changes in \\(v_0\\) and \\(h\\) , and inversely sensitive to \\(g\\) . Real-world applications must consider terrain, air resistance, and spin for accurate modeling.","title":"2.5 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"\ud83c\udf0d 3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-real-world-examples-of-projectile-motion","text":"Projectile motion models are widely used to analyze and predict the behavior of objects launched through the air. Although idealized, the core concepts apply across multiple fields:","title":"3.1 Real-World Examples of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#sports","text":"Football : Calculating the arc of a long-range shot or optimizing a throw-in angle. Basketball : Predicting whether a jump shot will go in, based on release angle and velocity. Golf : Determining launch angles and spin for maximum driving distance.","title":"\u26bd Sports"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#artillery-military","text":"Projectile Trajectories : A fundamental component in the design and deployment of rockets, mortars, and ballistic missiles. Targeting Algorithms : Simplified models used in early targeting, later refined with correction factors.","title":"\ud83e\ude96 Artillery &amp; Military"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#civil-mechanical-engineering","text":"Water Fountains : Designing jets to achieve desired arcs and reach. Fire Hose Streams : Ensuring water reaches upper floors or targets accurately.","title":"\u26f2 Civil &amp; Mechanical Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#space-and-astrophysics","text":"Planetary Landings : Parabolic descent approximations are used during initial planning phases. Escape Velocities : Initial modeling assumes projectile-style motion before introducing orbital dynamics.","title":"\ud83c\udf0c Space and Astrophysics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-limitations-of-the-basic-model","text":"The idealized equations of projectile motion assume: Constant gravitational acceleration ( \\(g\\) ) No air resistance Flat, horizontal ground No rotation or curvature of the Earth Point-mass particles (no size or spin) These assumptions limit the accuracy of predictions in real scenarios. Here are the main factors not considered in the basic model:","title":"3.2 Limitations of the Basic Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-additional-real-world-factors","text":"","title":"3.3 Additional Real-World Factors"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-air-resistance-drag","text":"Air resistance opposes the direction of motion and increases with velocity. Its presence results in: Shorter range : The projectile loses kinetic energy over time. Asymmetrical trajectory : The descent is steeper than the ascent. Terminal velocity : For downward motion, objects stop accelerating eventually. The drag force can be modeled as: $$ F_d = \\frac{1}{2} C_d \\rho A v^2 $$ Where: - \\(C_d\\) : Drag coefficient - \\(\\rho\\) : Air density - \\(A\\) : Cross-sectional area - \\(v\\) : Instantaneous velocity Including air resistance requires solving a system of coupled nonlinear differential equations.","title":"1. \ud83c\udf00 Air Resistance (Drag)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-wind","text":"Wind can alter the projectile path significantly: - Headwind reduces range - Tailwind increases range - Crosswind introduces lateral deflection Wind must be modeled as an external velocity vector affecting the relative airspeed of the projectile.","title":"2. \ud83c\udf2c\ufe0f Wind"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-inclined-or-curved-terrain","text":"Flat ground assumption fails in: - Mountainous terrain - Urban environments - Ramps and inclined launch pads When the landing surface is inclined at an angle \\(\\phi\\) , the effective range becomes geometry-dependent: $$ R_{\\text{inclined}} = \\frac{v_0^2 \\sin(2(\\theta - \\phi))}{g \\cos^2 \\phi} $$ Curved surfaces require even more complex treatment, often using polar or spherical coordinate systems.","title":"3. \ud83c\udfd4\ufe0f Inclined or Curved Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-earths-rotation-coriolis-effect","text":"For long-range projectiles (e.g., intercontinental artillery or rockets): - The Coriolis force due to Earth\u2019s rotation deflects trajectories. - Significant in military and aerospace engineering.","title":"4. \ud83e\udded Earth's Rotation (Coriolis Effect)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#34-summary","text":"Factor Effect on Motion Requires Complex Modeling? Air Resistance Reduces range, changes trajectory \u2705 Yes Wind Alters path, may drift laterally \u2705 Yes Terrain Geometry Affects landing height and distance \u2705 Yes Earth's Rotation Causes trajectory deviation \u2705 Yes While the basic projectile model provides a strong foundation, accurate prediction and engineering design require extending the model to account for these factors through numerical methods or simulation. # \u2705 Imports import numpy as np import matplotlib.pyplot as plt from math import radians, sin, cos, sqrt from ipywidgets import interact import warnings warnings.filterwarnings('ignore') # \u2705 Core Functions def compute_range(v0, theta_deg, g=9.81): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g def compute_range_with_height(v0, theta_deg, h, g=9.81): theta_rad = radians(theta_deg) vy = v0 * sin(theta_rad) vx = v0 * cos(theta_rad) discriminant = vy**2 + 2 * g * h if discriminant < 0: return 0 t_total = (vy + sqrt(discriminant)) / g return vx * t_total # \u2705 Plot: Range vs. Angle (Ground Level) def plot_range_vs_angle(v0, g=9.81): angles = np.linspace(0, 90, 500) ranges = [compute_range(v0, theta, g) for theta in angles] plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f\"v\u2080 = {v0} m/s\") plt.title(\"Range vs. Launch Angle (Ground Level)\") plt.xlabel(\"Angle \u03b8 (degrees)\") plt.ylabel(\"Range R (meters)\") plt.grid(True) plt.legend() plt.show() # \u2705 Plot: Range vs. Angle (With Height) def plot_range_vs_angle_with_height(v0, h, g=9.81): angles = np.linspace(1, 89, 500) ranges = [compute_range_with_height(v0, theta, h, g) for theta in angles] plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, color='green', label=f\"v\u2080 = {v0} m/s, height = {h} m\") plt.title(\"Range vs. Launch Angle (With Height)\") plt.xlabel(\"Angle \u03b8 (degrees)\") plt.ylabel(\"Range R (meters)\") plt.grid(True) plt.legend() plt.show() # \u2705 Plot: Multiple Trajectories def plot_trajectories(v0, h=0, g=9.81, angles_deg=[15, 30, 45, 60, 75]): plt.figure(figsize=(10, 6)) for angle in angles_deg: theta = radians(angle) vx = v0 * cos(theta) vy = v0 * sin(theta) discriminant = vy**2 + 2 * g * h if discriminant < 0: continue t_flight = (vy + sqrt(discriminant)) / g t = np.linspace(0, t_flight, 500) x = vx * t y = h + vy * t - 0.5 * g * t**2 plt.plot(x, y, label=f\"{angle}\u00b0\") plt.title(\"Projectile Trajectories at Different Angles\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.show() # \u2705 Interactive Dashboard (Colab-compatible) @interact(v0=(10, 100, 5), h=(0, 50, 1), g=(5.0, 20.0, 0.1)) def update(v0=30, h=0, g=9.81): plot_range_vs_angle(v0, g) plot_range_vs_angle_with_height(v0, h, g) plot_trajectories(v0, h, g)","title":"3.4 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem Typically of the form: \ud835\udc51 2 \ud835\udf03 \ud835\udc51 \ud835\udc61 2 + \ud835\udefd \ud835\udc51 \ud835\udf03 \ud835\udc51 \ud835\udc61 + \ud835\udf14 0 2 sin \u2061 ( \ud835\udf03 ) = \u0393 cos \u2061 ( \ud835\udf14 \ud835\udc61 ) dt 2 d 2 \u03b8 \u200b +\u03b2 dt d\u03b8 \u200b +\u03c9 0 2 \u200b sin(\u03b8)=\u0393cos(\u03c9t) Linearize the equation using the small-angle approximation: Replace sin \u2061 ( \ud835\udf03 ) \u2248 \ud835\udf03 sin(\u03b8)\u2248\u03b8 and simplify the equation. Derive or discuss analytical solutions for the linearized system. Identify and analyze resonance conditions: Determine the frequency at which maximum amplitude occurs. Discuss how energy is transferred and dissipated in the system: Role of damping and driving force. \u2705 2. Analysis of Dynamics Investigate how each parameter affects the system: Damping coefficient \ud835\udefd \u03b2 Driving amplitude \u0393 \u0393 Driving frequency \ud835\udf14 \u03c9 Characterize different dynamical behaviors: Periodic motion Quasiperiodic motion Chaotic motion Analyze the transition to chaos: Determine when and how the motion becomes sensitive to initial conditions. Describe the role of nonlinearities: Especially for large-angle oscillations where sin \u2061 ( \ud835\udf03 ) sin(\u03b8) cannot be approximated as \ud835\udf03 \u03b8. \u2705 3. Practical Applications Identify and describe real-world systems that follow similar dynamics: Energy harvesting mechanisms Suspension bridges (e.g., Tacoma Narrows) Driven RLC circuits in electronics Biomechanical systems (e.g., human gait, heart rhythms) Discuss engineering relevance: Mechanical resonance Vibration isolation Design of dampers and oscillators Reflect on model limitations: No air drag, ideal pivot, constant parameters, perfect periodic forcing. \u2705 4. Implementation Build a computational model (e.g., using Python): Implement numerical methods like Runge-Kutta to solve the nonlinear differential equation. Simulate pendulum motion under: Varying initial conditions Different damping, driving force, and frequency values Generate the following visualizations: Time-series plots of angular displacement Phase diagrams (velocity vs. displacement) Poincar\u00e9 sections (for periodic sampling of phase space) Bifurcation diagrams (as a function of driving amplitude or frequency) Allow for parameter input or sweeping to observe: Transitions from order to chaos Resonant behavior \u2705 5. Deliverables A complete Markdown document or Jupyter notebook with: All equations, derivations, and explanations. Annotated Python code. Graphs and diagrams described above. A written discussion of: The system\u2019s behavior under different regimes. Comparison of numerical and analytical results. Physical interpretation of results. Limitations and possible extensions, such as: Non-periodic forcing Nonlinear or velocity-dependent damping Coupled pendulum systems Theoretical Foundation: Forced Damped Pendulum The dynamics of a forced damped pendulum can be captured by a second-order nonlinear differential equation that includes the effects of inertia, damping, restoring force (gravity), and external periodic driving force. General Equation of Motion The standard form of the governing equation is: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = \\Gamma \\cos(\\omega t) \\] Where: \\(\\theta(t)\\) is the angular displacement. \\(\\beta\\) is the damping coefficient (frictional resistance). \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency of the undriven, undamped pendulum. \\(\\Gamma\\) is the amplitude of the external driving torque. \\(\\omega\\) is the angular frequency of the driving force. This equation is nonlinear due to the \\(\\sin(\\theta)\\) term. Linearization for Small-Angle Approximation For small angular displacements, where \\(\\theta \\ll 1\\) (in radians), we can approximate: \\[ \\sin(\\theta) \\approx \\theta \\] Substituting this into the equation yields a linear second-order nonhomogeneous ODE: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = \\Gamma \\cos(\\omega t) \\] This linearized form is more tractable analytically and is a classic model for studying resonance and damping in oscillatory systems. Analytical Solution to the Linearized Equation The general solution to the linearized equation is the sum of the homogeneous solution and the particular solution . Homogeneous Equation: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] This represents free damped oscillations . The solution depends on the damping ratio \\(\\zeta = \\frac{\\beta}{2\\omega_0}\\) . Possible cases: Underdamped: \\(\\zeta < 1\\) Critically damped: \\(\\zeta = 1\\) Overdamped: \\(\\zeta > 1\\) Particular Solution: For the driving term \\(\\Gamma \\cos(\\omega t)\\) , we assume a solution of the form: \\[ \\theta_p(t) = A \\cos(\\omega t - \\phi) \\] Substituting into the equation, we find: \\[ A = \\frac{\\Gamma}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\beta^2 \\omega^2}}, \\quad \\tan(\\phi) = \\frac{\\beta \\omega}{\\omega_0^2 - \\omega^2} \\] Resonance Resonance occurs when the amplitude \\(A\\) of steady-state oscillation becomes maximal. This happens when the driving frequency \\(\\omega\\) approaches the system's resonant frequency . For small damping ( \\(\\beta \\ll 1\\) ), the resonance condition approximates to: \\[ \\omega_{\\text{res}} \\approx \\omega_0 \\] At resonance, the system absorbs energy most efficiently from the external force, leading to large amplitude oscillations if not damped. Energy Transfer and Dissipation Driving Force : Injects energy into the system at a rate dependent on \\(\\Gamma\\) and \\(\\omega\\) . Damping Term ( \\(\\beta \\frac{d\\theta}{dt}\\) ): Continuously dissipates energy, converting mechanical energy into thermal energy. In the steady-state , energy input from the driver is balanced by energy loss from damping. This interplay governs whether the pendulum settles into a periodic motion, undergoes resonance, or transitions into chaotic behavior when nonlinearity is reintroduced. def forced_damped_pendulum(t, y, beta, omega0, Gamma, omega_drive): theta, omega = y dtheta_dt = omega domega_dt = -beta * omega - omega0**2 * np.sin(theta) + Gamma * np.cos(omega_drive * t) return [dtheta_dt, domega_dt] Simulate the pendulum motion def simulate(theta0, omega0_init, beta, omega0, Gamma, omega_drive, t_max=50, dt=0.01): t_eval = np.arange(0, t_max, dt) sol = solve_ivp( forced_damped_pendulum, [0, t_max], [theta0, omega0_init], t_eval=t_eval, args=(beta, omega0, Gamma, omega_drive), rtol=1e-8, atol=1e-10 ) return sol.t, sol.y[0], sol.y[1] --- Simulation Parameters --- theta0 = 0.2 omega0_init = 0.0 beta = 0.2 # Damping coefficient omega0 = 1.5 # Natural frequency Gamma = 1.2 # Driving amplitude omega_drive = 2/3 # Driving frequency --- Run Simulation --- t, theta, omega = simulate(theta0, omega0_init, beta, omega0, Gamma, omega_drive) --- Plot Time-Series and Phase Diagram --- fig, axs = plt.subplots(1, 2) axs[0].plot(t, theta) axs[0].set_title(\"Angular Displacement vs Time\") axs[0].set_xlabel(\"Time [s]\") axs[0].set_ylabel(\"Theta [rad]\") axs[1].plot(theta, omega, lw=0.8) axs[1].set_title(\"Phase Diagram\") axs[1].set_xlabel(\"Theta [rad]\") axs[1].set_ylabel(\"Angular Velocity [rad/s]\") plt.tight_layout() plt.show() 5. Deliverables \ud83d\udcd8 Full Analytical and Numerical Report This document presents a thorough investigation of the forced damped pendulum using both analytical and computational methods. It includes: Derivations of governing equations from physical principles. Analytical solutions under simplifying assumptions. Numerical solutions for general nonlinear behavior. Graphical representations of system dynamics. \ud83e\uddee Mathematical Foundation The governing nonlinear differential equation for the forced damped pendulum is: d 2 \u03b8 d t 2 + \u03b2 d \u03b8 d t + \u03c9 0 2 sin \u2061 ( \u03b8 ) = \u0393 cos \u2061 ( \u03c9 t ) dt 2 d 2 \u03b8 \u200b +\u03b2 dt d\u03b8 \u200b +\u03c9 0 2 \u200b sin(\u03b8)=\u0393cos(\u03c9t) For small angular displacements: sin \u2061 ( \u03b8 ) \u2248 \u03b8 sin(\u03b8)\u2248\u03b8 The linearized equation becomes: d 2 \u03b8 d t 2 + \u03b2 d \u03b8 d t + \u03c9 0 2 \u03b8 = \u0393 cos \u2061 ( \u03c9 t ) dt 2 d 2 \u03b8 \u200b +\u03b2 dt d\u03b8 \u200b +\u03c9 0 2 \u200b \u03b8=\u0393cos(\u03c9t) \ud83e\uddd1\u200d\ud83d\udcbb Annotated Python Code Code sections simulate: Time evolution of angular displacement. Phase portraits. Poincar\u00e9 sections. Bifurcation diagrams. \ud83d\udcc8 Graphs and Visualizations We include: Time-series plots for \u03b8 ( t ) \u03b8(t) Phase diagrams for ( \u03b8 , \u03b8 \u02d9 ) (\u03b8, \u03b8 \u02d9 ) Poincar\u00e9 sections showing periodic structure Bifurcation diagrams vs \u0393 \u0393 or \u03c9 \u03c9 \ud83e\udde0 System Behavior Discussion Key dynamical regimes: Periodic Motion (low driving) Resonance ( \u03c9 \u2248 \u03c9 0 \u03c9\u2248\u03c9 0 \u200b ) Chaos (high \u0393 \u0393) \ud83e\uddfe Comparison: Numerical vs Analytical For small angles and low forcing, numerical simulations match analytical solutions. Nonlinear behavior emerges under strong forcing and low damping. \ud83c\udf0d Physical Interpretation Applications: Engineering: Suspension systems, MEMS Climate: Quasiperiodic systems Electronics: RLC circuits \ud83d\udea7 Limitations & Extensions Assumes sinusoidal forcing, constant damping. Future work may explore: Random forcing Nonlinear damping Coupled pendula Double pendulum models","title":"Problem"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem","text":"Typically of the form: \ud835\udc51 2 \ud835\udf03 \ud835\udc51 \ud835\udc61 2 + \ud835\udefd \ud835\udc51 \ud835\udf03 \ud835\udc51 \ud835\udc61 + \ud835\udf14 0 2 sin \u2061 ( \ud835\udf03 ) = \u0393 cos \u2061 ( \ud835\udf14 \ud835\udc61 ) dt 2 d 2 \u03b8 \u200b +\u03b2 dt d\u03b8 \u200b +\u03c9 0 2 \u200b sin(\u03b8)=\u0393cos(\u03c9t) Linearize the equation using the small-angle approximation: Replace sin \u2061 ( \ud835\udf03 ) \u2248 \ud835\udf03 sin(\u03b8)\u2248\u03b8 and simplify the equation. Derive or discuss analytical solutions for the linearized system. Identify and analyze resonance conditions: Determine the frequency at which maximum amplitude occurs. Discuss how energy is transferred and dissipated in the system: Role of damping and driving force. \u2705 2. Analysis of Dynamics Investigate how each parameter affects the system: Damping coefficient \ud835\udefd \u03b2 Driving amplitude \u0393 \u0393 Driving frequency \ud835\udf14 \u03c9 Characterize different dynamical behaviors: Periodic motion Quasiperiodic motion Chaotic motion Analyze the transition to chaos: Determine when and how the motion becomes sensitive to initial conditions. Describe the role of nonlinearities: Especially for large-angle oscillations where sin \u2061 ( \ud835\udf03 ) sin(\u03b8) cannot be approximated as \ud835\udf03 \u03b8. \u2705 3. Practical Applications Identify and describe real-world systems that follow similar dynamics: Energy harvesting mechanisms Suspension bridges (e.g., Tacoma Narrows) Driven RLC circuits in electronics Biomechanical systems (e.g., human gait, heart rhythms) Discuss engineering relevance: Mechanical resonance Vibration isolation Design of dampers and oscillators Reflect on model limitations: No air drag, ideal pivot, constant parameters, perfect periodic forcing. \u2705 4. Implementation Build a computational model (e.g., using Python): Implement numerical methods like Runge-Kutta to solve the nonlinear differential equation. Simulate pendulum motion under: Varying initial conditions Different damping, driving force, and frequency values Generate the following visualizations: Time-series plots of angular displacement Phase diagrams (velocity vs. displacement) Poincar\u00e9 sections (for periodic sampling of phase space) Bifurcation diagrams (as a function of driving amplitude or frequency) Allow for parameter input or sweeping to observe: Transitions from order to chaos Resonant behavior \u2705 5. Deliverables A complete Markdown document or Jupyter notebook with: All equations, derivations, and explanations. Annotated Python code. Graphs and diagrams described above. A written discussion of: The system\u2019s behavior under different regimes. Comparison of numerical and analytical results. Physical interpretation of results. Limitations and possible extensions, such as: Non-periodic forcing Nonlinear or velocity-dependent damping Coupled pendulum systems","title":"Problem"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation-forced-damped-pendulum","text":"The dynamics of a forced damped pendulum can be captured by a second-order nonlinear differential equation that includes the effects of inertia, damping, restoring force (gravity), and external periodic driving force.","title":"Theoretical Foundation: Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#general-equation-of-motion","text":"The standard form of the governing equation is: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = \\Gamma \\cos(\\omega t) \\] Where: \\(\\theta(t)\\) is the angular displacement. \\(\\beta\\) is the damping coefficient (frictional resistance). \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) is the natural frequency of the undriven, undamped pendulum. \\(\\Gamma\\) is the amplitude of the external driving torque. \\(\\omega\\) is the angular frequency of the driving force. This equation is nonlinear due to the \\(\\sin(\\theta)\\) term.","title":"General Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#linearization-for-small-angle-approximation","text":"For small angular displacements, where \\(\\theta \\ll 1\\) (in radians), we can approximate: \\[ \\sin(\\theta) \\approx \\theta \\] Substituting this into the equation yields a linear second-order nonhomogeneous ODE: \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = \\Gamma \\cos(\\omega t) \\] This linearized form is more tractable analytically and is a classic model for studying resonance and damping in oscillatory systems.","title":"Linearization for Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analytical-solution-to-the-linearized-equation","text":"The general solution to the linearized equation is the sum of the homogeneous solution and the particular solution .","title":"Analytical Solution to the Linearized Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#homogeneous-equation","text":"\\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 \\] This represents free damped oscillations . The solution depends on the damping ratio \\(\\zeta = \\frac{\\beta}{2\\omega_0}\\) . Possible cases: Underdamped: \\(\\zeta < 1\\) Critically damped: \\(\\zeta = 1\\) Overdamped: \\(\\zeta > 1\\)","title":"Homogeneous Equation:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#particular-solution","text":"For the driving term \\(\\Gamma \\cos(\\omega t)\\) , we assume a solution of the form: \\[ \\theta_p(t) = A \\cos(\\omega t - \\phi) \\] Substituting into the equation, we find: \\[ A = \\frac{\\Gamma}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\beta^2 \\omega^2}}, \\quad \\tan(\\phi) = \\frac{\\beta \\omega}{\\omega_0^2 - \\omega^2} \\]","title":"Particular Solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the amplitude \\(A\\) of steady-state oscillation becomes maximal. This happens when the driving frequency \\(\\omega\\) approaches the system's resonant frequency . For small damping ( \\(\\beta \\ll 1\\) ), the resonance condition approximates to: \\[ \\omega_{\\text{res}} \\approx \\omega_0 \\] At resonance, the system absorbs energy most efficiently from the external force, leading to large amplitude oscillations if not damped.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#energy-transfer-and-dissipation","text":"Driving Force : Injects energy into the system at a rate dependent on \\(\\Gamma\\) and \\(\\omega\\) . Damping Term ( \\(\\beta \\frac{d\\theta}{dt}\\) ): Continuously dissipates energy, converting mechanical energy into thermal energy. In the steady-state , energy input from the driver is balanced by energy loss from damping. This interplay governs whether the pendulum settles into a periodic motion, undergoes resonance, or transitions into chaotic behavior when nonlinearity is reintroduced. def forced_damped_pendulum(t, y, beta, omega0, Gamma, omega_drive): theta, omega = y dtheta_dt = omega domega_dt = -beta * omega - omega0**2 * np.sin(theta) + Gamma * np.cos(omega_drive * t) return [dtheta_dt, domega_dt]","title":"Energy Transfer and Dissipation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simulate-the-pendulum-motion","text":"def simulate(theta0, omega0_init, beta, omega0, Gamma, omega_drive, t_max=50, dt=0.01): t_eval = np.arange(0, t_max, dt) sol = solve_ivp( forced_damped_pendulum, [0, t_max], [theta0, omega0_init], t_eval=t_eval, args=(beta, omega0, Gamma, omega_drive), rtol=1e-8, atol=1e-10 ) return sol.t, sol.y[0], sol.y[1]","title":"Simulate the pendulum motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-simulation-parameters-","text":"theta0 = 0.2 omega0_init = 0.0 beta = 0.2 # Damping coefficient omega0 = 1.5 # Natural frequency Gamma = 1.2 # Driving amplitude omega_drive = 2/3 # Driving frequency","title":"--- Simulation Parameters ---"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-run-simulation-","text":"t, theta, omega = simulate(theta0, omega0_init, beta, omega0, Gamma, omega_drive)","title":"--- Run Simulation ---"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#-plot-time-series-and-phase-diagram-","text":"fig, axs = plt.subplots(1, 2) axs[0].plot(t, theta) axs[0].set_title(\"Angular Displacement vs Time\") axs[0].set_xlabel(\"Time [s]\") axs[0].set_ylabel(\"Theta [rad]\") axs[1].plot(theta, omega, lw=0.8) axs[1].set_title(\"Phase Diagram\") axs[1].set_xlabel(\"Theta [rad]\") axs[1].set_ylabel(\"Angular Velocity [rad/s]\") plt.tight_layout() plt.show() 5. Deliverables \ud83d\udcd8 Full Analytical and Numerical Report This document presents a thorough investigation of the forced damped pendulum using both analytical and computational methods. It includes: Derivations of governing equations from physical principles. Analytical solutions under simplifying assumptions. Numerical solutions for general nonlinear behavior. Graphical representations of system dynamics. \ud83e\uddee Mathematical Foundation The governing nonlinear differential equation for the forced damped pendulum is: d 2 \u03b8 d t 2 + \u03b2 d \u03b8 d t + \u03c9 0 2 sin \u2061 ( \u03b8 ) = \u0393 cos \u2061 ( \u03c9 t ) dt 2 d 2 \u03b8 \u200b +\u03b2 dt d\u03b8 \u200b +\u03c9 0 2 \u200b sin(\u03b8)=\u0393cos(\u03c9t) For small angular displacements: sin \u2061 ( \u03b8 ) \u2248 \u03b8 sin(\u03b8)\u2248\u03b8 The linearized equation becomes: d 2 \u03b8 d t 2 + \u03b2 d \u03b8 d t + \u03c9 0 2 \u03b8 = \u0393 cos \u2061 ( \u03c9 t ) dt 2 d 2 \u03b8 \u200b +\u03b2 dt d\u03b8 \u200b +\u03c9 0 2 \u200b \u03b8=\u0393cos(\u03c9t) \ud83e\uddd1\u200d\ud83d\udcbb Annotated Python Code Code sections simulate: Time evolution of angular displacement. Phase portraits. Poincar\u00e9 sections. Bifurcation diagrams. \ud83d\udcc8 Graphs and Visualizations We include: Time-series plots for \u03b8 ( t ) \u03b8(t) Phase diagrams for ( \u03b8 , \u03b8 \u02d9 ) (\u03b8, \u03b8 \u02d9 ) Poincar\u00e9 sections showing periodic structure Bifurcation diagrams vs \u0393 \u0393 or \u03c9 \u03c9 \ud83e\udde0 System Behavior Discussion Key dynamical regimes: Periodic Motion (low driving) Resonance ( \u03c9 \u2248 \u03c9 0 \u03c9\u2248\u03c9 0 \u200b ) Chaos (high \u0393 \u0393) \ud83e\uddfe Comparison: Numerical vs Analytical For small angles and low forcing, numerical simulations match analytical solutions. Nonlinear behavior emerges under strong forcing and low damping. \ud83c\udf0d Physical Interpretation Applications: Engineering: Suspension systems, MEMS Climate: Quasiperiodic systems Electronics: RLC circuits \ud83d\udea7 Limitations & Extensions Assumes sinusoidal forcing, constant damping. Future work may explore: Random forcing Nonlinear damping Coupled pendula Double pendulum models","title":"--- Plot Time-Series and Phase Diagram ---"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Academic Notes on Kepler's Third Law for Circular Orbits Derivation of Kepler's Third Law for Circular Orbits To derive the relationship between the square of the orbital period ( \\(T^2\\) ) and the cube of the orbital radius ( \\(r^3\\) ) for a body in circular orbit, we rely on the principles of gravitational and centripetal forces. Consider a satellite of mass \\(m\\) orbiting a central body of mass \\(M\\) (e.g., a planet or star) in a circular orbit with radius \\(r\\) . The gravitational force provides the necessary centripetal force to maintain the circular motion. Step 1: Gravitational Force The gravitational force between the satellite and the central body, according to Newton's law of universal gravitation, is given by: $$ F_g = \\frac{G M m}{r^2}, $$ where \\(G\\) is the gravitational constant ( \\(G \\approx 6.674 \\times 10^{-11} , \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ), \\(M\\) is the mass of the central body, \\(m\\) is the mass of the satellite, and \\(r\\) is the orbital radius. Step 2: Centripetal Force For a circular orbit, the satellite moves with constant speed \\(v\\) along a circular path, requiring a centripetal force directed toward the center of the orbit. The centripetal force is: $$ F_c = \\frac{m v^2}{r}, $$ where \\(v\\) is the orbital velocity. Step 3: Equating Forces Since the gravitational force provides the centripetal force, we equate the two: $$ \\frac{G M m}{r^2} = \\frac{m v^2}{r}. $$ The mass \\(m\\) of the satellite cancels out (assuming \\(m \\neq 0\\) ), yielding: $$ \\frac{G M}{r^2} = \\frac{v^2}{r}. $$ Multiplying both sides by \\(r\\) , we obtain: $$ \\frac{G M}{r} = v^2. $$ Step 4: Orbital Velocity and Period The orbital velocity \\(v\\) is related to the orbital period \\(T\\) , the time taken to complete one full orbit. The circumference of the circular orbit is \\(2 \\pi r\\) , so the velocity is: $$ v = \\frac{2 \\pi r}{T}. $$ Squaring this, we get: $$ v^2 = \\frac{4 \\pi^2 r^2}{T^2}. $$ Step 5: Substitute and Simplify Substitute \\(v^2 = \\frac{4 \\pi^2 r^2}{T^2}\\) into the force balance equation: $$ \\frac{G M}{r} = \\frac{4 \\pi^2 r^2}{T^2}. $$ Multiply both sides by \\(T^2\\) : $$ \\frac{G M T^2}{r} = 4 \\pi^2 r^2. $$ Divide through by \\(r\\) to isolate terms: $$ G M T^2 = 4 \\pi^2 r^3. $$ Rearrange to express Kepler's Third Law: $$ T^2 = \\frac{4 \\pi^2}{G M} r^3. $$ This shows that the square of the orbital period ( \\(T^2\\) ) is proportional to the cube of the orbital radius ( \\(r^3\\) ), with the constant of proportionality \\(\\frac{4 \\pi^2}{G M}\\) , which depends on the mass of the central body and the gravitational constant. Key Assumptions The orbit is circular, ensuring constant \\(r\\) and \\(v\\) . The mass of the satellite \\(m\\) is much smaller than \\(M\\) , so the central body's motion is negligible. The gravitational constant \\(G\\) and central mass \\(M\\) are treated as constants. Implications for Astronomy Kepler's Third Law, expressed as \\(T^2 = \\frac{4 \\pi^2}{G M} r^3\\) , has profound applications in astronomy, enabling the study of celestial mechanics and gravitational interactions. Calculating Planetary Masses Kepler's Third Law allows astronomers to determine the mass of a central body by observing the orbits of its satellites. For a satellite with known orbital period \\(T\\) and radius \\(r\\) , we rearrange the law to solve for \\(M\\) : $$ M = \\frac{4 \\pi^2 r^3}{G T^2}. $$ For example, by measuring the orbital period and radius of a moon orbiting a planet, the planet's mass can be calculated. This method is critical for determining the masses of planets in the Solar System and exoplanets with orbiting satellites. Determining Orbital Distances The law also enables the calculation of the semi-major axis (equivalent to \\(r\\) for circular orbits) of an orbit when the period and central mass are known. Rearranging the law gives: $$ r = \\left( \\frac{G M T^2}{4 \\pi^2} \\right)^{1/3}. $$ This is used to estimate distances between celestial bodies, such as the distance of a planet from the Sun or a satellite from its parent planet, based on observed orbital periods. Applications in Gravitational Interactions Kepler's Third Law provides insights into gravitational interactions in planetary systems and satellite orbits. For instance: Satellite Orbits: The law governs the design of artificial satellite orbits, ensuring stable orbits at specific altitudes and periods (e.g., geostationary satellites with \\(T \\approx 24 , \\text{hours}\\) ). Planetary Systems: It helps model multi-planet systems, where the relative periods and distances reveal dynamical stability and resonances (e.g., the 2:1 resonance in some exoplanet systems). Binary Stars: The law applies to binary star systems, where the combined mass of the stars can be derived from their mutual orbits. Analysis of Real-World Examples To verify Kepler's Third Law, we can examine real-world orbital data for the Moon around Earth and planets in the Solar System, checking the proportionality \\(T^2 \\propto r^3\\) . Moon's Orbit Around Earth Orbital Period: The Moon's sidereal period is approximately \\(T = 27.32 , \\text{days} = 2.36 \\times 10^6 , \\text{s}\\) . Orbital Radius: The average distance from Earth to the Moon is \\(r \\approx 3.844 \\times 10^8 , \\text{m}\\) . Verification: Compute the ratio \\(\\frac{T^2}{r^3}\\) : $$ T^2 = (2.36 \\times 10^6)^2 = 5.57 \\times 10^{12} , \\text{s}^2, $$ $$ r^3 = (3.844 \\times 10^8)^3 = 5.68 \\times 10^{25} , \\text{m}^3, $$ $$ \\frac{T^2}{r^3} = \\frac{5.57 \\times 10^{12}}{5.68 \\times 10^{25}} \\approx 9.81 \\times 10^{-14} , \\text{s}^2 \\text{m}^{-3}. $$ Using Earth's mass ( \\(M \\approx 5.972 \\times 10^{24} , \\text{kg}\\) ) and \\(G\\) , the theoretical constant is: $$ \\frac{4 \\pi^2}{G M} = \\frac{4 \\pi^2}{(6.674 \\times 10^{-11})(5.972 \\times 10^{24})} \\approx 9.89 \\times 10^{-14} , \\text{s}^2 \\text{m}^{-3}. $$ The close agreement confirms the law's validity. Planetary Orbits: Earth and Jupiter Earth: Orbital period: \\(T = 1 , \\text{year} \\approx 3.156 \\times 10^7 , \\text{s}\\) . Orbital radius (semi-major axis): \\(r \\approx 1.496 \\times 10^{11} , \\text{m}\\) (1 AU). Ratio: \\(T^2 = (3.156 \\times 10^7)^2 \\approx 9.96 \\times 10^{15} , \\text{s}^2\\) , \\(r^3 = (1.496 \\times 10^{11})^3 \\approx 3.35 \\times 10^{33} , \\text{m}^3\\) , $$ \\frac{T^2}{r^3} \\approx 2.97 \\times 10^{-18} , \\text{s}^2 \\text{m}^{-3}. $$ Jupiter: Orbital period: \\(T \\approx 11.86 , \\text{years} \\approx 3.74 \\times 10^8 , \\text{s}\\) . Orbital radius: \\(r \\approx 7.78 \\times 10^{11} , \\text{m}\\) (5.2 AU). Ratio: \\(T^2 \\approx 1.40 \\times 10^{17} , \\text{s}^2\\) , \\(r^3 \\approx 4.71 \\times 10^{35} , \\text{m}^3\\) , $$ \\frac{T^2}{r^3} \\approx 2.97 \\times 10^{-18} , \\text{s}^2 \\text{m}^{-3}. $$ Verification: For the Sun ( \\(M \\approx 1.989 \\times 10^{30} , \\text{kg}\\) ), the constant is: $$ \\frac{4 \\pi^2}{G M} \\approx \\frac{4 \\pi^2}{(6.674 \\times 10^{-11})(1.989 \\times 10^{30})} \\approx 2.97 \\times 10^{-18} , \\text{s}^2 \\text{m}^{-3}. $$ The consistent ratio for Earth and Jupiter confirms that \\(T^2 \\propto r^3\\) , with the constant determined by the Sun's mass. These examples illustrate the practical application of Kepler's Third Law in verifying orbital relationships and determining central body masses. import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 M = 5.972e24 r = 7.378e6 T = 2 * np.pi * np.sqrt(r**3 / (G * M)) t = np.linspace(0, T, 1000) theta = 2 * np.pi * t / T x = r * np.cos(theta) y = r * np.sin(theta) plt.figure(figsize=(6, 6)) plt.plot(x, y, label=f'Orbit, r={r/1e6:.1f} Mm') plt.plot(0, 0, 'ro', label='Central Mass (Earth)') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title(f'Circular Orbit, T={T/3600:.2f} hours') plt.legend() plt.axis('equal') plt.grid(True) plt.savefig('single_orbit.png') plt.close() print(f\"Single Orbit - Orbital radius: {r/1e6:.1f} Mm, Orbital period: {T/3600:.2f} hours\\n\") radii = [6.378e6, 7.378e6, 8.378e6] plt.figure(figsize=(8, 8)) for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) t = np.linspace(0, T, 1000) theta = 2 * np.pi * t / T x = r * np.cos(theta) y = r * np.sin(theta) plt.plot(x, y, label=f'r={r/1e6:.1f} Mm, T={T/3600:.2f} hr') plt.plot(0, 0, 'ro', label='Central Mass (Earth)') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Multiple Circular Orbits') plt.legend() plt.axis('equal') plt.grid(True) plt.savefig('multiple_orbits.png') plt.close() print(\"Multiple Orbits:\") for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) print(f\"Radius: {r/1e6:.1f} Mm, Period: {T/3600:.2f} hours\") print() radii = np.linspace(6.378e6, 1.6378e7, 50) periods = 2 * np.pi * np.sqrt(radii 3 / (G * M)) T_squared = periods 2 r_cubed = radii**3 plt.figure(figsize=(8, 6)) plt.scatter(r_cubed, T_squared, label='Data') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('Verification of Kepler\u2019s Third Law: T\u00b2 vs r\u00b3') plt.grid(True) coeffs = np.polyfit(r_cubed, T_squared, 1) trendline = np.poly1d(coeffs) plt.plot(r_cubed, trendline(r_cubed), 'r--', label=f'Fit: slope={coeffs[0]:.2e}') plt.legend() expected_slope = 4 * np.pi**2 / (G * M) print(\"Kepler's Third Law Verification:\") print(f\"Expected slope (4\u03c0\u00b2/GM): {expected_slope:.2e}\") print(f\"Fitted slope: {coeffs[0]:.2e}\") plt.savefig('kepler_verification.png') plt.close()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"Academic Notes on Kepler's Third Law for Circular Orbits Derivation of Kepler's Third Law for Circular Orbits To derive the relationship between the square of the orbital period ( \\(T^2\\) ) and the cube of the orbital radius ( \\(r^3\\) ) for a body in circular orbit, we rely on the principles of gravitational and centripetal forces. Consider a satellite of mass \\(m\\) orbiting a central body of mass \\(M\\) (e.g., a planet or star) in a circular orbit with radius \\(r\\) . The gravitational force provides the necessary centripetal force to maintain the circular motion. Step 1: Gravitational Force The gravitational force between the satellite and the central body, according to Newton's law of universal gravitation, is given by: $$ F_g = \\frac{G M m}{r^2}, $$ where \\(G\\) is the gravitational constant ( \\(G \\approx 6.674 \\times 10^{-11} , \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) ), \\(M\\) is the mass of the central body, \\(m\\) is the mass of the satellite, and \\(r\\) is the orbital radius. Step 2: Centripetal Force For a circular orbit, the satellite moves with constant speed \\(v\\) along a circular path, requiring a centripetal force directed toward the center of the orbit. The centripetal force is: $$ F_c = \\frac{m v^2}{r}, $$ where \\(v\\) is the orbital velocity. Step 3: Equating Forces Since the gravitational force provides the centripetal force, we equate the two: $$ \\frac{G M m}{r^2} = \\frac{m v^2}{r}. $$ The mass \\(m\\) of the satellite cancels out (assuming \\(m \\neq 0\\) ), yielding: $$ \\frac{G M}{r^2} = \\frac{v^2}{r}. $$ Multiplying both sides by \\(r\\) , we obtain: $$ \\frac{G M}{r} = v^2. $$ Step 4: Orbital Velocity and Period The orbital velocity \\(v\\) is related to the orbital period \\(T\\) , the time taken to complete one full orbit. The circumference of the circular orbit is \\(2 \\pi r\\) , so the velocity is: $$ v = \\frac{2 \\pi r}{T}. $$ Squaring this, we get: $$ v^2 = \\frac{4 \\pi^2 r^2}{T^2}. $$ Step 5: Substitute and Simplify Substitute \\(v^2 = \\frac{4 \\pi^2 r^2}{T^2}\\) into the force balance equation: $$ \\frac{G M}{r} = \\frac{4 \\pi^2 r^2}{T^2}. $$ Multiply both sides by \\(T^2\\) : $$ \\frac{G M T^2}{r} = 4 \\pi^2 r^2. $$ Divide through by \\(r\\) to isolate terms: $$ G M T^2 = 4 \\pi^2 r^3. $$ Rearrange to express Kepler's Third Law: $$ T^2 = \\frac{4 \\pi^2}{G M} r^3. $$ This shows that the square of the orbital period ( \\(T^2\\) ) is proportional to the cube of the orbital radius ( \\(r^3\\) ), with the constant of proportionality \\(\\frac{4 \\pi^2}{G M}\\) , which depends on the mass of the central body and the gravitational constant. Key Assumptions The orbit is circular, ensuring constant \\(r\\) and \\(v\\) . The mass of the satellite \\(m\\) is much smaller than \\(M\\) , so the central body's motion is negligible. The gravitational constant \\(G\\) and central mass \\(M\\) are treated as constants. Implications for Astronomy Kepler's Third Law, expressed as \\(T^2 = \\frac{4 \\pi^2}{G M} r^3\\) , has profound applications in astronomy, enabling the study of celestial mechanics and gravitational interactions. Calculating Planetary Masses Kepler's Third Law allows astronomers to determine the mass of a central body by observing the orbits of its satellites. For a satellite with known orbital period \\(T\\) and radius \\(r\\) , we rearrange the law to solve for \\(M\\) : $$ M = \\frac{4 \\pi^2 r^3}{G T^2}. $$ For example, by measuring the orbital period and radius of a moon orbiting a planet, the planet's mass can be calculated. This method is critical for determining the masses of planets in the Solar System and exoplanets with orbiting satellites. Determining Orbital Distances The law also enables the calculation of the semi-major axis (equivalent to \\(r\\) for circular orbits) of an orbit when the period and central mass are known. Rearranging the law gives: $$ r = \\left( \\frac{G M T^2}{4 \\pi^2} \\right)^{1/3}. $$ This is used to estimate distances between celestial bodies, such as the distance of a planet from the Sun or a satellite from its parent planet, based on observed orbital periods. Applications in Gravitational Interactions Kepler's Third Law provides insights into gravitational interactions in planetary systems and satellite orbits. For instance: Satellite Orbits: The law governs the design of artificial satellite orbits, ensuring stable orbits at specific altitudes and periods (e.g., geostationary satellites with \\(T \\approx 24 , \\text{hours}\\) ). Planetary Systems: It helps model multi-planet systems, where the relative periods and distances reveal dynamical stability and resonances (e.g., the 2:1 resonance in some exoplanet systems). Binary Stars: The law applies to binary star systems, where the combined mass of the stars can be derived from their mutual orbits. Analysis of Real-World Examples To verify Kepler's Third Law, we can examine real-world orbital data for the Moon around Earth and planets in the Solar System, checking the proportionality \\(T^2 \\propto r^3\\) . Moon's Orbit Around Earth Orbital Period: The Moon's sidereal period is approximately \\(T = 27.32 , \\text{days} = 2.36 \\times 10^6 , \\text{s}\\) . Orbital Radius: The average distance from Earth to the Moon is \\(r \\approx 3.844 \\times 10^8 , \\text{m}\\) . Verification: Compute the ratio \\(\\frac{T^2}{r^3}\\) : $$ T^2 = (2.36 \\times 10^6)^2 = 5.57 \\times 10^{12} , \\text{s}^2, $$ $$ r^3 = (3.844 \\times 10^8)^3 = 5.68 \\times 10^{25} , \\text{m}^3, $$ $$ \\frac{T^2}{r^3} = \\frac{5.57 \\times 10^{12}}{5.68 \\times 10^{25}} \\approx 9.81 \\times 10^{-14} , \\text{s}^2 \\text{m}^{-3}. $$ Using Earth's mass ( \\(M \\approx 5.972 \\times 10^{24} , \\text{kg}\\) ) and \\(G\\) , the theoretical constant is: $$ \\frac{4 \\pi^2}{G M} = \\frac{4 \\pi^2}{(6.674 \\times 10^{-11})(5.972 \\times 10^{24})} \\approx 9.89 \\times 10^{-14} , \\text{s}^2 \\text{m}^{-3}. $$ The close agreement confirms the law's validity. Planetary Orbits: Earth and Jupiter Earth: Orbital period: \\(T = 1 , \\text{year} \\approx 3.156 \\times 10^7 , \\text{s}\\) . Orbital radius (semi-major axis): \\(r \\approx 1.496 \\times 10^{11} , \\text{m}\\) (1 AU). Ratio: \\(T^2 = (3.156 \\times 10^7)^2 \\approx 9.96 \\times 10^{15} , \\text{s}^2\\) , \\(r^3 = (1.496 \\times 10^{11})^3 \\approx 3.35 \\times 10^{33} , \\text{m}^3\\) , $$ \\frac{T^2}{r^3} \\approx 2.97 \\times 10^{-18} , \\text{s}^2 \\text{m}^{-3}. $$ Jupiter: Orbital period: \\(T \\approx 11.86 , \\text{years} \\approx 3.74 \\times 10^8 , \\text{s}\\) . Orbital radius: \\(r \\approx 7.78 \\times 10^{11} , \\text{m}\\) (5.2 AU). Ratio: \\(T^2 \\approx 1.40 \\times 10^{17} , \\text{s}^2\\) , \\(r^3 \\approx 4.71 \\times 10^{35} , \\text{m}^3\\) , $$ \\frac{T^2}{r^3} \\approx 2.97 \\times 10^{-18} , \\text{s}^2 \\text{m}^{-3}. $$ Verification: For the Sun ( \\(M \\approx 1.989 \\times 10^{30} , \\text{kg}\\) ), the constant is: $$ \\frac{4 \\pi^2}{G M} \\approx \\frac{4 \\pi^2}{(6.674 \\times 10^{-11})(1.989 \\times 10^{30})} \\approx 2.97 \\times 10^{-18} , \\text{s}^2 \\text{m}^{-3}. $$ The consistent ratio for Earth and Jupiter confirms that \\(T^2 \\propto r^3\\) , with the constant determined by the Sun's mass. These examples illustrate the practical application of Kepler's Third Law in verifying orbital relationships and determining central body masses. import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 M = 5.972e24 r = 7.378e6 T = 2 * np.pi * np.sqrt(r**3 / (G * M)) t = np.linspace(0, T, 1000) theta = 2 * np.pi * t / T x = r * np.cos(theta) y = r * np.sin(theta) plt.figure(figsize=(6, 6)) plt.plot(x, y, label=f'Orbit, r={r/1e6:.1f} Mm') plt.plot(0, 0, 'ro', label='Central Mass (Earth)') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title(f'Circular Orbit, T={T/3600:.2f} hours') plt.legend() plt.axis('equal') plt.grid(True) plt.savefig('single_orbit.png') plt.close() print(f\"Single Orbit - Orbital radius: {r/1e6:.1f} Mm, Orbital period: {T/3600:.2f} hours\\n\") radii = [6.378e6, 7.378e6, 8.378e6] plt.figure(figsize=(8, 8)) for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) t = np.linspace(0, T, 1000) theta = 2 * np.pi * t / T x = r * np.cos(theta) y = r * np.sin(theta) plt.plot(x, y, label=f'r={r/1e6:.1f} Mm, T={T/3600:.2f} hr') plt.plot(0, 0, 'ro', label='Central Mass (Earth)') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Multiple Circular Orbits') plt.legend() plt.axis('equal') plt.grid(True) plt.savefig('multiple_orbits.png') plt.close() print(\"Multiple Orbits:\") for r in radii: T = 2 * np.pi * np.sqrt(r**3 / (G * M)) print(f\"Radius: {r/1e6:.1f} Mm, Period: {T/3600:.2f} hours\") print() radii = np.linspace(6.378e6, 1.6378e7, 50) periods = 2 * np.pi * np.sqrt(radii 3 / (G * M)) T_squared = periods 2 r_cubed = radii**3 plt.figure(figsize=(8, 6)) plt.scatter(r_cubed, T_squared, label='Data') plt.xlabel('r\u00b3 (m\u00b3)') plt.ylabel('T\u00b2 (s\u00b2)') plt.title('Verification of Kepler\u2019s Third Law: T\u00b2 vs r\u00b3') plt.grid(True) coeffs = np.polyfit(r_cubed, T_squared, 1) trendline = np.poly1d(coeffs) plt.plot(r_cubed, trendline(r_cubed), 'r--', label=f'Fit: slope={coeffs[0]:.2e}') plt.legend() expected_slope = 4 * np.pi**2 / (G * M) print(\"Kepler's Third Law Verification:\") print(f\"Expected slope (4\u03c0\u00b2/GM): {expected_slope:.2e}\") print(f\"Fitted slope: {coeffs[0]:.2e}\") plt.savefig('kepler_verification.png') plt.close()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 .","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":".","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}